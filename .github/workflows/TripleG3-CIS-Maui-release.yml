name: TripleG3.CIS.Maui - Release (NuGet)

on:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build-pack-publish:
    name: Build, Pack, Publish
    runs-on: windows-latest

    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 9.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.0.x

      - name: Install .NET MAUI workload
        shell: pwsh
        run: |
          dotnet --info
          dotnet workload install maui --source https://api.nuget.org/v3/index.json --ignore-failed-sources

      - name: Compute CI package version
        id: get_version
        shell: pwsh
        run: |
          $csproj = "src/TripleG3.CIS.Maui.csproj"
          [xml]$xml = Get-Content -LiteralPath $csproj
          # Collect all <Version> elements across PropertyGroup nodes
          $verNode = @($xml.Project.PropertyGroup | ForEach-Object { $_.Version } | Where-Object { $_ }) | Select-Object -First 1
          $ver = ($verNode | ForEach-Object { $_.ToString() })
          if ([string]::IsNullOrWhiteSpace($ver)) { $ver = "1.0.0" }
          # Strip any prerelease/build metadata (e.g., 1.2.3-beta => 1.2.3)
          $verCore = $ver.Split('-')[0]
          $parts = $verCore.Split('.')
          if ($parts.Length -ge 2) { $base = "$($parts[0]).$($parts[1])" } elseif ($parts.Length -eq 1) { $base = $parts[0] } else { $base = "1.0" }
          $ciVer = "$base.${{ github.run_number }}"
          echo "Base csproj version: $ver"
          echo "Computed CI version: $ciVer"
          echo "civersion=$ciVer" >> $env:GITHUB_OUTPUT

      - name: Restore
        shell: pwsh
        run: |
          dotnet restore src/TripleG3.CIS.Maui.csproj

      - name: Pack (Release)
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          dotnet pack src/TripleG3.CIS.Maui.csproj -c Release -p:ContinuousIntegrationBuild=true -p:Version=${{ steps.get_version.outputs.civersion }} -o artifacts

      - name: Publish to NuGet.org
        if: success()
        shell: pwsh
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          if (-not $env:NUGET_API_KEY) { throw "NUGET_API_KEY secret is missing." }
          Get-ChildItem artifacts -Filter *.nupkg | ForEach-Object { dotnet nuget push $_.FullName --api-key $env:NUGET_API_KEY --source https://api.nuget.org/v3/index.json --skip-duplicate }
          Get-ChildItem artifacts -Filter *.snupkg | ForEach-Object { dotnet nuget push $_.FullName --api-key $env:NUGET_API_KEY --source https://api.nuget.org/v3/index.json --skip-duplicate }

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nupkgs
          path: artifacts/*.nupkg
          if-no-files-found: warn

      - name: Upload symbols
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: snupkgs
          path: artifacts/*.snupkg
          if-no-files-found: warn
